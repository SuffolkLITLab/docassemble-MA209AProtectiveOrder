---
modules:
  - docassemble.income.income
---
objects:
  - parents: DADict # MB: need this to initialize parents because we have it structured as a dictionary
---
id: locating defendant
question: |
  How can the police find ${other_parties.familiar()}?
subquestion: |
  You already told us that ${other_parties.familiar()}'s address is
  ${other_parties[0].address.on_one_line(include_unit=True)}.

  What is the best place and time to find ${other_parties.familiar()}? 
  
  Is ${other_parties.familiar()} staying somewhere else at the moment? 
 
  Does ${other_parties.familiar()} go to certain places or visit friends at a particular time?
fields:
  - 'Where is the best **place** to find ${other_parties.familiar()} right now?': other_parties[0].location_best
    maxlength: 300
  - 'When is the best **time** to find ${other_parties.familiar()}': other_parties[0].best_times_find
    maxlength: 125
  - 'Where **else** can you find ${other_parties.familiar()}?': other_parties[0].locations_other
    required: False
    maxlength: 300
  - 'Tell the court anything more that could help police find ${other_parties.familiar()}.': other_parties[0].location_information_other
    datatype: area
    required: False
validation code: |
  if len(other_parties[0].location_information_other) > (675 - len(str(other_parties[0].location_best + other_parties[0].best_times_find + other_parties[0].locations_other))):
    validation_error("There is only space for " + str((675 - len(str(other_parties[0].location_best + other_parties[0].best_times_find + other_parties[0].locations_other)))) + " more characters on the form.", field='other_parties[0].location_information_other')
---
id: photo of defendant
question: |
 Do you have a photo of ${other_parties.familiar()}?
subquestion: |
  A photograph helps the police identify ${other_parties.familiar()}.
fields:
  - 'Can you provide a photo of ${other_parties.familiar()}?': other_parties[0].photo_yes
    datatype: yesnoradio
  - Are you ready to upload one now?: other_parties[0].photo_yes_can_upload  
    datatype: yesnoradio
    help: |
      If it is safe, you can use your phone's camera to take
      a picture of a photo album. We will attach the picture to your
      form to give to the police.
    show if: other_parties[0].photo_yes  
  - no label: photo_upload
    datatype: file
    show if: other_parties[0].photo_yes_can_upload
    accept: |
      "image/*, image/png,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"
---
id: defendant appearance
question: |
  ${other_parties.familiar()}'s physical appearance
fields:
  - What is ${other_parties.familiar()}'s race or ethnicity? (choose the best description, or "other"): other_parties[0].race
    datatype: radio
    choices:
      - White: White
      - Black or African American: Black
      - American Indian or Alaska Native: Native Amer.
      - Asian: Asian
      - Native Hawaiian or Other Pacific Islander: Pacific Is.
      - Hispanic or Latino/Latina/Latinx: Hispanic
      - Multiracial: Multiracial
      - Other: other
  - Other race: other_parties[0].race_other
    show if: 
      variable: other_parties[0].race
      is: other
    maxlength: 9      
  - "What is ${other_parties.familiar()}'s eye color?": other_parties[0].eye_color
    choices:
      - Amber: Amber
      - Black: Black
      - Blue: Blue
      - Brown: Brown
      - Gray: Gray
      - Green: Green
      - Hazel: Hazel
      - Red: Red
      - Other/unknown: other/unknown
  - Other eye color: other_parties[0].eye_other
    required: False
    show if:
      variable: other_parties[0].eye_color
      is: 'other/unknown'
    maxlength: 9
  - "What is ${other_parties.familiar()}'s hair color?": other_parties[0].hair_color
    choices:
      - Brown: Brown
      - Blond: Blond
      - Black: Black
      - Gray: Gray
      - Red: Red
      - White: White
      - Other: other
  - Other hair color: other_parties[0].hair_color_other
    show if:
      variable: other_parties[0].hair_color
      is: "other"
    maxlength: 9     
---
id: defendant age
question: |
  How old is ${other_parties.familiar()}?
fields:
  - I don't know when ${other_parties.familiar()} was born: dont_know_birthdate
    datatype: yesno
  - Birthdate: other_parties[0].birthdate
    datatype: BirthDate
    hide if: dont_know_birthdate
  - Best estimate of age (in years): other_parties[0].age
    datatype: integer
    show if: dont_know_birthdate
---
id: defendant vital stats
question: |
  ${other_parties.familiar()}'s physical appearance
subquestion: |
  Answer as many questions below as you can.
fields:
  - "How tall is ${other_parties.familiar()}?": other_parties[0].height
    required: False
    hint: e.g., 5 foot 10 inches
    validate: |
      # If the user entry only includes digits, prompt for a unit as well
      lambda y: True if not y.isnumeric() else validation_error(word("Please include a unit. E.g., 6 foot 1 inch."))
  - "What is ${other_parties.familiar()}'s weight?": other_parties[0].weight
    hint: e.g., 180 pounds
    required: False
    validate: |
      lambda y: True if not y.isnumeric() else validation_error(word("Please include a unit. E.g., 180 pounds."))
  - "What best describes ${other_parties.familiar()}'s body type?": other_parties[0].physical_build
    help: |
      You can choose more than one if that is helpful to describe ${other_parties.familiar()}.
    datatype: checkboxes
    choices:
      - Small: Small
      - Medium: Medium
      - Large: Large
      - Lanky: Lanky
      - Stocky: Stocky
      - Husky: Husky
      - Muscular: Muscular
      - Fat: Fat
      - Thin: Thin
  - 'Does ${other_parties.familiar()} have any of the following?': other_parties[0].physical_other
    required: False
    datatype: checkboxes
    choices:
      - Full beard: Full beard
      - Goatee: Goatee
      - Thin mustache: Thin mustache
      - Thick mustache: Thick mustache
      - Glasses: Glasses
      - Tattoo (describe below): Tattooo
      - Scars: Scars
      - Acne: Acne
  - note: |
      Using your own words, briefly describe anything that would help the police identify ${other_parties.familiar()} that we haven't covered
  - no label: other_parties[0].physical_other_details
    hint: e.g., details about tattoo, unusual walk, etc.
    required: False
validation code: |
  if len(other_parties[0].physical_other_details) > (88 - len(str(other_parties[0].physical_other.true_values()))):
    validation_error("There is only space for " + str((88 - len(str(other_parties[0].physical_other.true_values())))) + " more characters on the form.", field= 'other_parties[0].physical_other_details')
---
code: |
  defendant_race = other_parties[0].race if not other_parties[0].race == 'other' else other_parties[0].race_other
  defendant_eye_color = other_parties[0].eye_color if not other_parties[0].eye_color == 'other/unknown' else other_parties[0].eye_other
  defendant_hair_details = other_parties[0].hair_color if not other_parties[0].hair_color == "other" else other_parties[0].hair_color_other
  defendant_other_description = str(other_parties[0].physical_other.true_values()) + space('other_parties[0].physical_other_details')
  
---

# Comment: |
#  Combine these deets in with Bad Barry's contact information question.
# question: |
#  What about ${other_parties.familiar()}'s floor and mailbox?
# subquestion: |
#  This information is important so  ${other_parties.familiar()} gets a copy of the restraining order as soon as possible.

#  You already told us that ${other_parties.familiar()} lives
#  at ${other_parties[0].address.on_one_line(include_unit=True)}.
#  fields:
#  - 'What floor is "${other_parties[0].address.on_one_line(include_unit=True)}" on?': other_parties[0].address_floor
#    default: ${str(other_parties[0].address.unit)[:1] if defined('other_parties[0].address.unit') and other_parties[0].address.unit.isnumeric() else ''}
#    required: False
#  - "What is the name ${other_parties.familiar()}'s mailbox? Type 'None' if there is no name.": other_parties[0].name_door_mailbox
---
id: defendant work information
question: |
  ${other_parties.familiar()}'s work information
fields:  
  - ${other_parties.familiar()} is not working: defendant_not_employed
    datatype: yesno
    disable others: True    
  - Name of employer: other_parties[0].employer
    maxlength: 71
  - Address of employer: other_parties[0].work_address
    address autocomplete: True
    required: False
  - Work phone: other_parties[0].work_phone
    maxlength: 20
    required: False
  - Job title / position: other_parties[0].work_title
    maxlength: 30
    required: False
  - Department: other_parties[0].work_department
    maxlength: 71
    required: False  
  - Work hours: other_parties[0].work_hours
    maxlength: 30
    required: False
---
id: defendant car information
question: |
  Information about ${other_parties.familiar()}'s car
subquestion: |
  If ${other_parties.familiar()} does not have a car
  but has a motorcycle, truck, or other vehicle, tell us 
  about that.
fields:
  - ${other_parties.familiar()} does not have a car or other vehicle: other_parties[0].does_not_have_car
    datatype: yesno
    disable others: True
  - 'Color (choose or type different answer)': other_parties[0].vehicle_color
    datatype: combobox
    choices:
      - Black: Black
      - White: White
      - Gray: Gray
      - Silver: Silver
      - Blue: Blue
      - Red: Red
      - Brown: Brown
      - Gold: Gold
      - Green: Green
      - Tan: Tan
      - Orange: Orange
    required: False      
  - 'Make': other_parties[0].vehicle_make
    hint: e.g., Honda
    maxlength: 14
    required: False
  - 'Model': other_parties[0].vehicle_model
    hint: e.g., Civic
    maxlength: 14
    required: False
  - 'Year': other_parties[0].vehicle_year
    datatype: combobox
    code: recent_years(20)
    required: False
  - "${other_parties.familiar()}'s vehicle license plate number": other_parties[0].vehicle_license_plate
    maxlength: 36
    required: False
---
id: defendant language and parent info
question: |
  General information about ${other_parties.familiar()}
subquestion: |
  This information helps the police identify and communicate with ${other_parties.familiar()}.
fields:
  - 'Does ${other_parties.familiar()} understand English?': other_parties[0].understands_english
    datatype: yesnoradio
  - 'What language does ${other_parties.familiar()} understand?': other_parties[0].language_other
    show if:
      variable: other_parties[0].understands_english
      maxlength: 52
      is: False
  - "${other_parties.familiar()}'s mother's maiden name": parents[0]
    maxlength: 35
    required: False
    help: |
      The police use this information to find the right ${other_parties[0]} in case other people have the same name.
  - "${other_parties.familiar()}'s father's name": parents[1]
    maxlength: 34
    required: False
    help: |
      The police use this information to find the right ${other_parties[0]} in case other people have the same name.
  - ${other_parties.familiar()}'s birthplace: other_parties[0].birthplace
    maxlength: 35
    required: False
  - Last 4 digits of ${other_parties.familiar()}'s Social Security Number : other_parties[0].social_security_number
    required: False
    maxlength: 4
---
id: defendant safety questions
comment: |
  We need a "do not know" option here, will this work in PDF if we just change
  radio buttons to yesnomaybe?
question: |
  Keeping you and the police safe
# subquestion: |
#  The following information helps keep you and the police safe. 
fields:
  - 'Does ${other_parties.familiar()} have a history of violence towards police officers?': other_parties[0].police_violence_yes
    datatype: yesnoradio
  - 'Does ${other_parties.familiar()} have a history of using or abusing drugs or alcohol?': other_parties[0].drug_alcohol_yes
    datatype: yesnoradio
  - 'Alcohol? And if drugs, what drugs?': other_parties[0].drug_alcohol_abuse
    maxlength: 29
    show if:
      variable: other_parties[0].drug_alcohol_yes
      is: True
      maxlength: 29
  - 'Does ${other_parties.familiar()} have any mental health problems?': other_parties[0].psychiatric_emotional_problems_yes
    datatype: yesnoradio
  - 'What type of mental health problems?': other_parties[0].psychiatric_emotional_problems
    maxlength: 29
    show if:
      variable: other_parties[0].psychiatric_emotional_problems_yes
      is: True
      maxlength: 29
---
id: defendant contact information
question: |
  ${other_parties.familiar()}'s contact information  
fields:
  - Street address: other_parties[0].address.address
    address autocomplete: True
  - Unit: other_parties[0].address.unit
    maxlength: 10
    required: False
  - Floor: other_parties[0].address_floor
    maxlength: 11
    required: False
  - City: other_parties[0].address.city
  - State: other_parties[0].address.state
    default: MA   
    code: |
      states_list()   
  - Zip: other_parties[0].address.zip
    required: False
  - Cell phone: other_parties[0].mobile_number    
    maxlength: 14
    required: False
  - Other phone number: other_parties[0].phone_number
    maxlength: 14
    required: False
  - Email: other_parties[0].email
    maxlength: 50
    required: False 
  - Name on ${other_parties.familiar()}'s mailbox : other_parties[0].name_door_mailbox
    maxlength: 23
    required: False 
---
need: defendantinformation209A0008
reconsider: True
attachment:
    variable name: GL209A_defendant_information_attachment[i]
    # skip undefined: True
    name: ${other_parties.familiar()}-information-209a
    filename: Defendantinformation209a
    pdf template file: defendant-information-209A.pdf
    decimal places: 2    
    fields: 
      - "defendant_name": ${ str(other_parties[0]) }
      - "defendant_birthdate": ${ other_parties[0].birthdate.format() if not dont_know_birthdate else 'About ' + str(other_parties[0].age) + ' years old'}
      - "parent_name": ${ str(parents[0]) }
      - "parent2_name": ${ str(parents[1]) }
      - "defendant_phone_home": ${ other_parties[0].phone_number }
      - "plaintiff_signature": ${ users[0].signature_if_final(i) }
      - "signature_date": ${ signature_date }
      - "defendant_name_other": ${ other_parties[0].name_other if defendant_has_alias else '' }
      - "defendant_birthplace": ${ other_parties[0].birthplace }
      - "defendant_social_security_number": ${ other_parties[0].social_security_number }
      - "defendant_gender_male_yes": ${ other_parties[0].gender_male }
      - "defendant_photo_yes": ${ other_parties[0].photo_yes }
      - "defendant_photo_no": ${ not other_parties[0].photo_yes }
      - "defendant_gender_female_yes": ${ other_parties[0].gender_female }
      - "defendant_race": ${ defendant_race }
      - "defendant_eye_color": ${ defendant_eye_color }
      - "defendant_hair_color": ${ defendant_hair_details }
      - "defendant_height": ${ other_parties[0].height }
      - "defendant_weight": ${ other_parties[0].weight }
      - "defendant_physical_build": ${ other_parties[0].physical_build.true_values() }
      - "defendant_physical_other": ${ defendant_other_description }
      - "defendant_address": ${ other_parties[0].address.on_one_line(include_unit=True) }
      - "defendant_english_yes": ${ other_parties[0].understands_english }
      - "defendant_english_no": ${ not other_parties[0].understands_english }
      - "defendant_address_apartment": ${ showifdef('other_parties[0].address.unit') }
      - "defendant_address_floor": ${ other_parties[0].address_floor }
      - "defendant_name_door_mailbox": ${ other_parties[0].name_door_mailbox }
      - "defendant_language_other": ${ other_parties[0].language_other }
      - "defendant_employer": ${ other_parties[0].employer }
      - "defendant_work_phone": ${ other_parties[0].work_phone }
      - "defendant_work_title": ${ other_parties[0].work_title }
      - "defendant_work_address": ${ other_parties[0].work_address }
      - "defendant_work_hours": ${ other_parties[0].work_hours }
      - "defendant_work_department": ${ other_parties[0].work_department }
      # - "defendant_location_best": ${ other_parties[0].location_best }
      # - "defendant_locations_other": ${ other_parties[0].locations_other }
      # - "defendant_best_times_find": ${ other_parties[0].best_times_find }
      - "defendant_location_information_other": ${ defendant_location_information_other }
      - "defendant_vehicle_license_plate": ${ other_parties[0].vehicle_license_plate }
      - "defendant_vehicle_year": ${ other_parties[0].vehicle_year }
      - "defendant_vehicle_make": ${ other_parties[0].vehicle_make }
      - "defendant_vehicle_model": ${ other_parties[0].vehicle_model }
      - "defendant_vehicle_color": ${ other_parties[0].vehicle_color }
      - "defendant_police_violence_no": ${ not other_parties[0].police_violence_yes }
      - "defendant_police_violence_yes": ${ other_parties[0].police_violence_yes }
      - "defendant_drug_alcohol_no": ${ not other_parties[0].drug_alcohol_yes }
      - "defendant_drug_alcohol_yes": ${ other_parties[0].drug_alcohol_yes }
      - "defendant_drug_alcohol_abuse": ${ other_parties[0].drug_alcohol_abuse }
      - "defendant_gun_license_carry_possess_no": ${ not other_parties[0].gun_license_carry_possess_yes }
      - "defendant_gun_license_carry_possess_yes": ${ other_parties[0].gun_license_carry_possess_yes }
      - "defendant_gun_license_carry_possess": ${ defendant_weapons } # TODO: may want this in addendum. Could use GL209A_page1_attachment.safe_value('defendant_weapons')
      - "defendant_psychiatric_emotional_problems_no": ${ not other_parties[0].psychiatric_emotional_problems_yes }
      - "defendant_psychiatric_emotional_problems_yes": ${ other_parties[0].psychiatric_emotional_problems_yes }
      - "defendant_psychiatric_emotional_problems": ${ other_parties[0].psychiatric_emotional_problems }
      - "plaintiff_name": ${ users }
      - defendant_phone : ${other_parties[0].mobile_number}
      - defendant_email: ${other_parties[0].email}
---
id: defendant info intro
comment: |
  This question is used to introduce your interview. Please customize
continue button field: defendantinformation209A0008_intro
question: |
  Defendant Information Form
subquestion: |
  The  next questions are about ${other_parties.familiar()}. 
  
  The police use this information to find and serve ${other_parties.familiar()} with a copy of the restraining order. 
  
  The police need to give ${other_parties.familiar()} a copy of the
  restraining order so that ${other_parties.familiar()} knows:
  
  * the court has ordered ${other_parties.familiar()} to stop abusing you and 
  * where and when to come to court for the 10 day hearing.
  
  If the police cannot serve ${other_parties.familiar()}:
  
  * You may have to come back to court every 10 days until they can.
  * ${other_parties.familiar()} will not know about the order so cannot be expected to follow it.
  
  The more information you can provide about ${other_parties.familiar()}'s usual
  location, the sooner the order will be served.
  
  If you see ${other_parties.familiar()}, and you know the order has not been
  served, call the police. The police should not arrest
  ${other_parties.familiar()}, but they will be able to serve
  ${other_parties.familiar()}. Call the police even if you are not afraid.
---
id: interview_order_defendantinformation209A0008
code: |
  # This is a placeholder to control logic flow in this interview
  # It was generated from interview_generator.py as an 'interview order' type question.
  al_intro_screen 
  defendantinformation209A0008_intro
  # Set the preferred/allowed courts for this interview
  # preferred_court = interview_metadata["defendantinformation209A0008"]["preferred court"]
  # allowed_courts = interview_metadata["defendantinformation209A0008"]["allowed courts"]
  # other_parties[0].name_other
  if other_parties[0].understands_english:
    other_parties[0].language_other = ''
  other_parties[0].photo_yes
  other_parties[0].race
  other_parties[0].eye_color # Needed if in the skip_sections code
  other_parties[0].age
  other_parties[0].height
  other_parties[0].photo_yes

  defendant_has_guns["gun"] # trigger our DADict question
  # can't use defendant_has_guns.any_true() since it does not handle None values
  other_parties[0].gun_license_carry_possess_yes = False
  for key in defendant_has_guns:
    other_parties[0].gun_license_carry_possess_yes = other_parties[0].gun_license_carry_possess_yes or defendant_has_guns[key]
  # other_parties[0].gun_license_carry_possess_yes = reduce(lambda y,z: y or z, defendant_has_guns)
  if not other_parties[0].gun_license_carry_possess_yes: # defendant_has_guns.any_true():
    defendant_weapons_description = DAEmpty()
  other_parties[0].police_violence_yes
  
  if not other_parties[0].drug_alcohol_yes:
    other_parties[0].drug_alcohol_no = True
    other_parties[0].drug_alcohol_abuse = ''
  if not other_parties[0].gun_license_carry_possess_yes:
    other_parties[0].gun_license_carry_possess = ''
  if not other_parties[0].psychiatric_emotional_problems_yes:
    other_parties[0].psychiatric_emotional_problems_no = True
    other_parties[0].psychiatric_emotional_problems = ''

  other_parties[0].address.address
  # other_parties[0].address_floor  
  other_parties[0].location_best    
  other_parties[0].location_information_other

  if defendant_not_employed:
    other_parties[0].employer = "N/A"
    other_parties[0].work_address = ''
    other_parties[0].work_phone = ''
    other_parties[0].work_title = ''
    other_parties[0].work_department = ''
    other_parties[0].work_hours = ''

  if other_parties[0].does_not_have_car:
    other_parties[0].vehicle_make = "N/A"
    other_parties[0].vehicle_color = "N/A"
    other_parties[0].vehicle_model = "N/A"
    other_parties[0].vehicle_year = "N/A"
    other_parties[0].vehicle_license_plate = "N/A"

  str(parents[0])
  str(parents[1])
  
  # Trigger all computed values
  defendant_race
  defendant_eye_color
  defendant_hair_details

  # signature_date

  # defendantinformation209A0008_preview_question # Pre-canned preview screen
  # basic_questions_signature_flow
  # other_parties[0].signature
  defendantinformation209A0008 = True
---
code: |
  defendant_location_information_other = ("Best place to find: "
    + other_parties[0].location_best \
    + ". Best times to find: " + other_parties[0].best_times_find \
    + ". Other places to find: " + other_parties[0].locations_other \
    + ". Other information: " + other_parties[0].location_information_other)
---
objects:
  - GL209A_defendant_information_attachment: ALDocument.using(filename="Defendant_Information_Form", title="Defendant Information Form", enabled=True, has_addendum=True, default_overflow_message=" [See addendum]")
---
depends on:
  - other_parties[0].photo_yes
  - other_parties[0].photo_yes_can_upload
code: |
  # In theory we could use photo_upload directly, but user could have photo_upload defined but change mind about using it
  GL209A_defendant_information_attachment.overflow_fields['photo_upload'].overflow_trigger = bool(other_parties[0].photo_yes and other_parties[0].photo_yes_can_upload)
  GL209A_defendant_information_attachment.overflow_fields['photo_upload'].label = "Photo of Defendant"
  GL209A_defendant_information_attachment.overflow_fields.gathered = True
---
reconsider: True
attachment:
  - variable name: GL209A_defendant_information_attachment.addendum
    docx template file: 209A_defendant_addendum.docx